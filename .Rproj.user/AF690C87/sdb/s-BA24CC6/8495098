{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to the R language\"\nauthor: \"JD-DR\"\ndate: \"25/10/2015\"\noutput: html_document\nbibliography: ../references/references.bib\nheader-includes: \\usepackage{amsmath}\n---\n\n## R and RStudio\n  - [R coding style](https://google.github.io/styleguide/Rguide.xml)\n  - R as a calculator. Console.\n  - Variables. The workspace. Objects.\n    + assign operator <-   sequence operator  :\n    + arithmetic operators: + - = / ^   %/%  %% \n    + ls() objects()  ls.str() lists and describes   rm(x) delete a variable\n  - R script\n    # comments\n    source(\"filewithcommands.R\")\n    sink(\"recordmycommands.lis\")\n    savehistory()\n  - From command line:\n    + Rscript  \n      Rscript file | -e (e.g. Rscript -e 2+2)  \n      quit()\n\n  - ls() \n  - s.str()\n  - objects()\n  - rm(totalCost)\n  - str(   )  (Structure) provides information about the variable\n\n  \n\n***\n  \nFour # create an environment in RStudio\n\n![Environment](../figures/environments.png)\n\nWorking directories:\n\n```{r}\n# set your working directory\n# setwd(\"~/workingDir/\")\ngetwd()\n# record R commands:\n# sink(\"recordmycommands.txt\", append = TRUE)\n```\n\n***\n    \n## Basic Data Types\n  - class(   )\n  - logical: TRUE  FALSE\n  - numeric, integer:  \n      * is.numeric(  )\n      * is.integer(  )  \n  - character\n\n\nExamples:\n```{r}\nTRUE\nclass(TRUE)\nFALSE\nNA  # missing\nclass(NA)\nT\nF\n\n# numeric data type\n2\nclass(2)\n2.5\n2L  # integer\nclass(2L)\n\nis.numeric(2)\nis.numeric(2L)\nis.integer(2)\nis.integer(2L)\n```\n\n  - data type coercion:  \n      * as.numeric(  )\n      * as.character(  )   \n      * as.integer(  )\n\nExamples:\n```{r}\ntruenum <- as.numeric(TRUE)\nfalsenum <- as.numeric(FALSE)\n\nnum2char <- as.character(55)\nchar2num  <- as.numeric(\"55.3\")\n\nchar2int  <- as.integer(\"55.3\")\n\n```\n\n\n### Mising values\n\nNA Not Available\n\nExamples:\n```{r}\nNA + 1\nmean(c(5,NA,7))\nmean(c(5,NA,7), na.rm=TRUE)  # some functions allow to remove NAs\n```\n\n\n***\n  \n## Vectors\n\nExamples:\n\n```{r}\nphases <- c(\"reqs\", \"dev\", \"test1\", \"test2\", \"maint\")\nstr(phases)\nis.vector(phases)\n\nthevalues <- c(15, 60, 30, 35, 22)\nnames(thevalues) <- phases\nstr(thevalues)\nthevalues\n\n# a single value is a vector\naphase <- 44\nis.vector(aphase)\n\n```\n\nA single value is a vector! Example:\n```{r}\naphase <- 44\nis.vector(aphase)\n\nlength(aphase)\nlength(thevalues)\n```\n\n### Coercion for vectors\n\nthevalues1 <- c(15, 60, \"30\", 35, 22)\nclass(thevalues1)\nthevalues1\n\n\n\"#\" <-  is equivalent to   assign ( )\n\nassign(\"costs\", c(50, 100, 30))\n\n### Vector arithmetic\n\nIt is done in all elements. For example:\n\n```{r}\nassign(\"costs\", c(50, 100, 30))\ncosts/3\ncosts - 5\ncosts <- costs - 5\n\nincomes <- c(200, 800, 10)\nearnings <- incomes - costs\nsum(earnings)\n```\n\n### Subsetting vectors  []\n\nphase1 <- phases[1]\nphase1\nphase3 <- phases[3]\nphase3\n\nthevalues[phase1]\nthevalues[\"reqs\"]\n\ntestphases <- phases[c(3,4)]\nthevalues[testphases]\n\n### Negative indexes\n\nphases1 <- phases[-5]\nphases\nphases1\n\nphases2 <- phases[-testphases] ## error in argument\nphases2 <- phases[-c(3,4)]\nphases2\n\n### subset using logical vector\n\nphases3 <- phases[c(FALSE, TRUE, TRUE, FALSE)] #recicled first value\nphases3\n\nselectionv <- c(FALSE, TRUE, TRUE, FALSE)\nphases3 <- phases[selectionv]\nphases3\n\nselectionvec2 <- c(TRUE, FALSE)\n\nthevalues2 <- thevalues[selectionvec2]\nthevalues2\n\n\n### Generating regular sequenceswith  : and seq\n\naseqofvalues <- 1:20\n\naseqofvalues2 <- seq(from=-3, to=3, by=0.5 )\naseqofvalues2\n\naseqofvalues3 <- seq(0, 100, by=10)\naseqofvalues4 <- aseqofvalues3[c(2, 4, 6, 8)]\naseqofvalues4\naseqofvalues4 <- aseqofvalues3[-c(2, 4, 6, 8)]\naseqofvalues4\n\naseqofvalues3[c(1,2)] <- c(666,888)\naseqofvalues3\n\n### Logical values in vectors TRUE/FALSE\n\naseqofvalues3 > 50\naseqofvalues5 <- aseqofvalues3[aseqofvalues3 > 50]\naseqofvalues5\naseqofvalues6 <- aseqofvalues3[!(aseqofvalues3 > 50)]\naseqofvalues6\n\n### Comparison functions\n\naseqofvalues7 <- aseqofvalues3[aseqofvalues3 == 50]\naseqofvalues7\n\naseqofvalues8 <- aseqofvalues3[aseqofvalues3 == 22]\naseqofvalues8\n\naseqofvalues9 <- aseqofvalues3[aseqofvalues3 != 50]\naseqofvalues9\n\nlogicalcond <- aseqofvalues3 >= 50\naseqofvalues10 <- aseqofvalues3[logicalcond]\naseqofvalues10\n\n\n### Remove Missing Values (NAs)\n\naseqofvalues3[c(1,2)] <- c(NA,NA)\naseqofvalues3\n\naseqofvalues3 <- aseqofvalues3[!is.na(aseqofvalues3)]\naseqofvalues3\n\n\n***\n\n## Arrays and Matrices\n\nmymat <- matrix(1:12, nrow =2)\nmymat\n\nmymat <- matrix(1:12, ncol =3)\nmymat\n\nmymat <- matrix(1:12, nrow=2, byrow = TRUE)\nmymat\n\nmymat <- matrix(1:12, nrow=3, ncol=4)\nmymat\n\nmymat <- matrix(1:12, nrow=3, ncol=4, byrow=TRUE)\nmymat\n\n### recycling\nmymat <- matrix(1:5, nrow=3, ncol=4, byrow=TRUE)\nmymat\n\n### rbind  cbind\n\ncbind(1:3, 1:3)\nrbind(1:3, 1:3)\n\nmymat <- matrix(1)\n\nmymat <- matrix(1:8, nrow=2, ncol=4, byrow=TRUE)\nmymat\n\nrbind(mymat, 9:12)\nmymat <- cbind(mymat, c(5,9))\nmymat\n\nmymat  <- matrix(1:8, byrow = TRUE, nrow=2)\nmymat\nrownames(mymat) <- c(\"row1\", \"row2\")\nmymat\ncolnames(mymat) <- c(\"col1\", \"col2\", \"col3\", \"col4\")\nmymat\n\nmymat2 <- matrix(1:12, byrow=TRUE, nrow=3, dimnames=list(c(\"row1\", \"row2\", \"row3\"),\n                                                         c(\"col1\", \"col2\", \"col3\", \"col4\")))\nmymat2\n\n### Coercion in Arrays\n\nmatnum <- matrix(1:8, ncol = 2)\nmatnum\nmatchar <- matrix(LETTERS[1:6], nrow = 4, ncol = 3)\nmatchar\n\nmatchars <- cbind(matnum, matchar)\nmatchars\n\n### Subsetting  \n\nmymat3 <- matrix(sample(-8:15, 12), nrow=3)\nmymat3\nmymat3[2,3]\nmymat3[1,4]\nmymat3[3,]\nmymat3[,4]\nmymat3[5] # counts elements by column\nmymat3[9]\n\n#### Subsetting multiple elements\n\nmymat3[2, c(1,3)]\nmymat3[c(2,3), c(1,3,4)]\n\nrownames(mymat3) <- c(\"r1\", \"r2\", \"r3\")\ncolnames(mymat3) <- c(\"c1\", \"c2\", \"c3\", \"c4\")\nmymat3[\"r2\", c(\"c1\", \"c3\")]\n\n#### Subset by logical vector\nmymat3[c(FALSE, TRUE, FALSE),\n       c(TRUE, FALSE, TRUE, FALSE)]\nmymat3[c(FALSE, TRUE, TRUE),\n       c(TRUE, FALSE, TRUE, TRUE)]\n\n### matrix arithmetic\n\nrow1 <- c(220, 137)\nrow2 <- c(345, 987)\nrow3 <- c(111, 777)\n\nmymat4 <- rbind(row1, row2, row3)\nrownames(mymat4) <- c(\"row_1\", \"row_2\", \"row_3\")\ncolnames(mymat4) <- c(\"col_1\", \"col_2\")\nmymat4\n\nmymat4/10\nmymat4 -100\n\nmymat5 <- rbind(c(50,50), c(10,10), c(100,100))\nmymat5\n\nmymat4 - mymat5\n\nmymat4 * (mymat5/100)\n\n\n### index matrices\n\nm1 <- array(1:20, dim=c(4,5))\nm1\n\nindex <- array(c(1:3, 3:1), dim=c(3,2))\nindex\n\nm1[index] <-0\nm1\n\n***\n## Factors\n\nblood <- c(\"B\", \"AB\", \"O\", \"A\", \"O\", \"O\", \"A\", \"B\")\nblood\n\nblood_factor <- factor(blood)\nblood_factor   #sorted alphabetically\nstr(blood_factor)\n\nblood_factor2 <- factor(blood, \n                       levels = c(\"O\", \"A\", \"B\", \"AB\"))\nblood_factor2\nstr(blood_factor2)\n\nlevels(blood_factor) <- c(\"type_A\", \"type_AB\", \"type_B\", \"type_O\")\nblood_factor\n\nfactor(blood, \n       levels= c(\"O\", \"A\", \"B\", \"AB\"),\n       labels = c(\"type_O\", \"type_A\", \"type_B\", \"type_AB\"))\n\n# nominal versus ordinal, ordered factors\nblood_factor[1] < blood_factor[2]  # error\n\ntshirts <- c(\"M\", \"L\", \"S\", \"S\", \"L\", \"M\", \"L\", \"M\")\n\ntshirt_factor <- factor(tshirts, ordered = TRUE,\n                        levels = c(\"S\", \"M\", \"L\"))\ntshirt_factor\n\ntshirt_factor[1] < tshirt_factor[2]\n\n***\n## Lists\n\n  - '['  returns a list\n  - '[[' returns the list element\n  - '$' returns the content of that element in the list\n  \n\nc(\"R good times\", 190, 5)\n\nsong <- list(\"R good times\", 190, 5)\nis.list(song)\nstr(song)\n\nnames(song) <- c(\"title\", \"duration\", \"track\")\nsong\nsong$title\n\nsong2 <- list(title=\"Good Friends\", \n              duration = 125,\n              track= 2,\n              rank = 6)\n\nsong3 <- list(title=\"Many Friends\", \n              duration = 125,\n              track= 2,\n              rank = 1,\n              similar2 = song2)\n\nsong[1]\nsong$title\nstr(song[1])\nsong[[1]]\nstr(song[[1]])\n\nsong2[3]\n\nsong3[5]  # a list\nstr(song3[5])\nsong3[[5]]\nsong3$similar2\n\nsong[c(1,3)]\nstr(song[c(1,3)])\n\nresult <- song[c(1,3)]\nresult[1]\nresult[[1]]\nstr(result)\nresult$title\nresult$track\n\n#### access with [[ to content \nsong3[[5]][[1]]\nsong3$similar2[[1]]\n\n### Subsets\n#### subset by names\nsong[c(\"title\", \"track\")]\n\nsong3[\"similar2\"]\nresultsimilar <- song3[\"similar2\"]\nstr(resultsimilar)\nresultsimilar1 <-song3[[\"similar2\"]]\nstr(resultsimilar1)\nresultsimilar1$title\n\n#### subset by logicals\nsong[c(TRUE, FALSE, TRUE, FALSE)]\nresult3 <- song[c(TRUE, FALSE, TRUE, FALSE)]  # is a list of two elements\n\n### extending the list\nshared <- c(\"Hillary\", \"Javi\", \"Mikel\", \"Patty\")\n\nsong3$shared <- shared\nstr(song3)\n\ncities <- list(\"Bilbao\", \"New York\", \"Donostia\")\nsong3[[\"cities\"]] <- cities\nstr(song3)\n\n***\n## Data frames\n\nthenames <- c(\"Ane\", \"Mike\", \"Xabi\", \"Florentino\", \"Edurne\")\nages <- c(44, 20, 33, 15, 65)\nemployee <- c(FALSE, FALSE, TRUE, TRUE, FALSE)\n\nmydataframe <- data.frame(thenames, ages, employee)\nmydataframe\n\nnames(mydataframe) <- c(\"FirstName\", \"Age\", \"Employee\")\nstr(mydataframe)\n\nstrings are not factors!\n\nmydataframe <- data.frame(thenames, ages, employee,\n                          stringsAsFactors=FALSE)\nnames(mydataframe) <- c(\"FirstName\", \"Age\", \"Employee\")\nstr(mydataframe)\n\n\n### subset data frame\n\nmydataframe[4,2]\nmydataframe[4, \"Age\"]\nmydataframe[, \"FirstName\"]\n\nmydataframe[c(2,5), c(\"Age\", \"Employee\")]\nmatfromframe <- as.matrix(mydataframe[c(2,5), c(\"Age\", \"Employee\")])\nstr(matfromframe)\n\nmydataframe[3]\n\n### convert to vector\n\nmyvec <- as.vector(mydataframe[[3]])\nstr(myvec)\n\n### add column\nheight <- c(166, 165, 158, 176, 199)\nweight <- c(66, 77, 99, 88, 109)\nmydataframe$height <- height \nmydataframe[[\"weight\"]] <- weight\nmydataframe\n\n### add a column \n\nbirthplace <- c(\"Tolosa\", \"London\", \"Zarautz\", \"Irun\", \"New York\")\n\nmydataframe <- cbind(mydataframe, birthplace)\nmydataframe\n\n### add a row \n\nxabier <- data.frame(FirstName = \"Xabier\", Age = 77, Employee=TRUE, height= 170, weight = 65, birthplace =\"Donostia\", stringsAsFactors=FALSE)\nmydataframe <- rbind (mydataframe, xabier)\nmydataframe\n\n#### sorting \n\nmydataframeSorted <- mydataframe[order(mydataframe$Age, decreasing = TRUE), ]  #all columns\nmydataframeSorted\nmydataframeSorted2 <- mydataframe[order(mydataframe$Age, decreasing = TRUE), c(1,2,6) ]\nmydataframeSorted2\n\n***\n## Reading Data\n\nlibrary(foreign)\nisbsg <- read.arff(\"~/Documents/Rmaster1516/isbsg10teaser.arff\")\n\nmydataISBSG <- isbsg[, c(\"FS\", \"N_effort\")]\n\n```{r} \nlibrary(foreign)\nisbsg <- read.arff(\"../datasets/effortEstimation/isbsg10.arff\")\n\nmydataISBSG <- isbsg[, c(\"FS\", \"N_effort\")]\nstr(mydataISBSG)\n```\n\n***\n\n## Plots\n\nThere are several graphic packages that are recommended, in particular ggplot. However, there is some basic support in the R base for graphics:\n\n```{r}\nplot(mydataISBSG$FS, mydataISBSG$N_effort)\n```\n\n***\n\n## Flow of Control \n\nIfelse:\n\n```{r}\nlibrary(foreign)\nkc1 <- read.arff(\"../datasets/defectPred/D1/KC1.arff\")\nkc1$Defective <- ifelse(kc1$Defective == \"Y\", 1, 0)\nhead(kc1, 1)\n```\n\n***\n\n",
    "created" : 1467054543793.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3770840663",
    "id" : "8495098",
    "lastKnownWriteTime" : 1467056117,
    "last_content_update" : 1467056117424,
    "path" : "C:/Users/javier/DASE/sections/rIntro.Rmd",
    "project_path" : "sections/rIntro.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}